#!/usr/bin/env python3
"""
Description: Creates user specific secrets
Use: Once per user
"""

import json
import re
import string
from argparse import ArgumentParser

# check for duplicate entries and invalid characters
# return error string if invalid
def validate_list(list):
    usernames = {}
    for i in range(len(list)):
        s = list[i]

        # check for malformed input
        index = s.find(':')
        if index <= 0 or index >= len(s)-1:
            return "list contains malformed input"

        # parse user and pin
        user = s[:index]
        pin = s[index+1:]

        # check for invalid user
        match = re.search(r'[^A-Za-z]', user)
        if match or len(user) < 1 or len(user) > 15:
            return "list contains an invalid username [^A-Za-z] with len 1-15"
        
        # look for dupes
        if user in usernames:
            return "list contains duplicate usernames"
        usernames[user] = 0

        # check for invalid pin
        match = re.search(r'[^0-9]', pin)
        if match or len(pin) < 8 or len(pin) > 64:
            return "list contains an invalid PIN [^0-9] with len 8-64"
    
    return ''

def main(user_list, outfile):
    """writes user secrets to json file
    args:
        users_ (string): string of users and pins seperated by colons e.g. user1:123456789
        outfile (string): name of file to write user_secrets to """
    try:
        secrets = open(outfile, "w")
    except Exception as e:
        print("Unable to open secrets file: %s" % (e,))
        return 0

    try:
        user_dict = {user.split(":")[0]: {"pin": user.split(":")[1], "id": num} for num, user in enumerate(user_list)}
    except IndexError:
        raise Exception(
            "Unable to parse user name and pin. Please make sure you entered the user-list as "
            "space seperated pairs of usernames and pins. Example: --user-list user1:12345678 user2:12345689")
    info = json.dumps(user_dict)
    secrets.write(info)
    secrets.close()


def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--user-list', nargs='+',
                        help='list of users and pins seperated by a colon: "user1:12345678 user2:12345679" ',
                        required=True)
    parser.add_argument('--outfile', help='location to save user secrets file', required=True)
    args = parser.parse_args()
    return args.user_list, args.outfile


if __name__ == '__main__':
    users, loc = get_args()
    print("generating user specific secrets")
    error_str = validate_list(users)
    if error_str:
        print("Error:", error_str)
    else:
        main(users, loc)
